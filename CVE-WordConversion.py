#!/usr/bin/env python
import subprocess
import sys

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

try:
    import csv
    import tkinter as tk
    from tkinter import filedialog
    from docx import Document
    from docx.shared import Pt
    from docx.enum.style import WD_STYLE_TYPE
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.by import By
    from webdriver_manager.chrome import ChromeDriverManager
    from bs4 import BeautifulSoup
    import time
except ImportError as e:
    missing_module = str(e).split("No module named ")[1].strip("'")
    print(f"Missing module {missing_module}. Installing...")
    install(missing_module)
    print(f"{missing_module} installed. Please rerun the script.")
    sys.exit()

def setup_driver():
    options = Options()
    options.headless = True
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    return driver

def normalize_headers(headers):
    return {header.strip().strip('\ufeff').replace(' ', '_').upper(): header for header in headers}

def get_version_details(soup):
    version_details_list = []
    version_blocks = soup.select('div.cve-versions-column > div.menu.p-0')

    for block in version_blocks:
        # Extracting text for both affected and unaffected versions
        for item in block.select('li > span, li > p'):
            text = ' '.join(item.stripped_strings)
            version_details_list.append(text)

    return '\n'.join(version_details_list)

def get_cve_details(driver, cve_id):
    if not cve_id:
        print(f"Skipping empty CVE ID.")
        return "N/A", "N/A"
    affected_versions = "N/A"
    remediation_links = "N/A"
    url = f"https://www.cve.org/CVERecord?id={cve_id}"
    driver.get(url)
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'div.cve-versions-column > div.menu.p-0'))
        )
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        affected_versions = get_version_details(soup)

        # Extracting remediation references
        references_div = soup.select_one('div#cve-references ul')
        if references_div:
            remediation_links_list = [a['href'] for a in references_div.select('li a')]
            remediation_links = ', '.join(remediation_links_list)
    except Exception as e:
        print(f"Error retrieving details for CVE {cve_id}: {e}")
    return affected_versions, remediation_links

def generate_word_document(driver, csv_file, output_file):
    document = Document()
    heading_style = document.styles.add_style('CVE Heading', WD_STYLE_TYPE.PARAGRAPH)
    heading_style.font.name = 'Calibri'
    heading_style.font.size = Pt(14)
    heading_style.font.bold = True

    sub_heading_style = document.styles.add_style('CVE Sub-heading', WD_STYLE_TYPE.PARAGRAPH)
    sub_heading_style.font.name = 'Calibri'
    sub_heading_style.font.size = Pt(12)
    sub_heading_style.font.bold = True

    paragraph_style = document.styles.add_style('CVE Paragraph', WD_STYLE_TYPE.PARAGRAPH)
    paragraph_style.font.name = 'Calibri'
    paragraph_style.font.size = Pt(11)

    with open(csv_file, 'r', encoding='utf-8-sig') as file:
        csv_reader = csv.DictReader(file)
        normalized_headers = normalize_headers(csv_reader.fieldnames)
        for row in csv_reader:
            cve_id = row.get(normalized_headers.get('CVE_ID', ''))
            if not cve_id:  # Skipping rows where CVE ID is empty
                print("Skipping row with empty CVE ID.")
                continue  # Skip to the next row

            if document.paragraphs:
                document.add_page_break()

            document.add_paragraph('CVE ID: ' + cve_id, style='CVE Heading')
            severity_paragraph = document.add_paragraph(style='CVE Sub-heading')
            severity_paragraph.add_run('Severity: ' + row.get(normalized_headers.get('SEVERITY', ''), '') + '    ')
            severity_paragraph.add_run('Base Score: ' + row.get(normalized_headers.get('BASE_SCORE', ''), ''))
            document.add_paragraph('Description:', style='CVE Sub-heading')
            document.add_paragraph(row.get(normalized_headers.get('DESCRIPTION', ''), ''), style='CVE Paragraph')

            try:
                affected_versions, remediation_links = get_cve_details(driver, cve_id)
                document.add_paragraph('Affected Versions:', style='CVE Sub-heading')
                document.add_paragraph(affected_versions, style='CVE Paragraph')
                document.add_paragraph('References:', style='CVE Sub-heading')
                document.add_paragraph(f"Please review the following references for detailed information and update instructions: {remediation_links}", style='CVE Paragraph')
            except Exception as e:
                print(f"Failed to retrieve details for {cve_id}: {e}")
                document.add_paragraph('Affected Versions:', style='CVE Sub-heading')
                document.add_paragraph("Error retrieving versions", style='CVE Paragraph')
                document.add_paragraph('References:', style='CVE Sub-heading')
                document.add_paragraph("Error retrieving references", style='CVE Paragraph')

            mitigation = row.get(normalized_headers.get('MITIGATION', ''), '').strip()
            if mitigation:
                document.add_paragraph('Mitigation:', style='CVE Sub-heading')
                document.add_paragraph(mitigation, style='CVE Paragraph')
            else:
                document.add_paragraph('Mitigation:', style='CVE Sub-heading')
                document.add_paragraph("Please refer to the 'References' section for detailed update instructions or consider upgrading to the latest software version available to address this vulnerability.", style='CVE Paragraph')

    document.save(output_file)
    print(f"Word document generated: {output_file}")
    
def main():
    root = tk.Tk()
    root.withdraw()
    csv_file = filedialog.askopenfilename(title="Select CVE CSV File", filetypes=[("CSV Files", "*.csv")])
    if csv_file:
        output_file = csv_file.rsplit('.', 1)[0] + '.docx'
        driver = setup_driver()
        try:
            generate_word_document(driver, csv_file, output_file)
            print(f"Word document generated: {output_file}")
        finally:
            driver.quit()
    else:
        print("No file selected.")

if __name__ == '__main__':
    main()
